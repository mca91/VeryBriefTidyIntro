Var2   <- c(1, 1)   # different group variances
CorXY  <- 0         # different correlations
CorXY2 <- -0.5      #
CorXY3 <- 0.5       #
n_test <- 500       # group size test set
n <- 20 # group size training set
# Class 1
Sigma <- matrix(c(Var[1], CorXY, CorXY, Var[2]), 2, 2)
XY1 <- mvrnorm(n = n, m1, Sigma)
XY1
bind_rows(XY1, XY2)
rbind(XY1, XY2)
cbind(rbind(XY1, XY2), training_class)
training_class <- c(rep(0, 20), rep(1, 20))
cbind(rbind(XY1, XY2), training_class)
XY1_test <- mvrnorm(n = n_test, m1, Sigma)
XY2_test <- mvrnorm(n = n_test, m2, Sigma)
test_class <- c(rep(0, 500), rep(1, 500))
cbind(rbind(XY1_test, XY2_test), test_class)
f_sample <- function(scheme) {
# group means
m1 <- c(4, 2)       # a), b), c)
m2 <- c(1, 5)       #
m1_4 <- c(3, 5)     # d)
m2_4 <- c(1, 7)     #
# (co)variances
Var    <- c(4, 4)   # equal group variances
Var2   <- c(1, 1)   # different group variances
CorXY  <- 0         # different correlations
CorXY2 <- -0.5      #
CorXY3 <- 0.5       #
n_test <- 500       # group size test set
if(scheme == "a") {
n <- 20 # group size training set
# Class 1
Sigma <- matrix(c(Var[1], CorXY, CorXY, Var[2]), 2, 2)
XY1 <- mvrnorm(n = n, m1, Sigma)
XY1_test <- mvrnorm(n = n_test, m1, Sigma)
# Class 2
XY2 <- mvrnorm(n = n, m2, Sigma)
XY2_test <- mvrnorm(n = n_test, m2, Sigma)
training_class <- c(rep(0, 20), rep(1, 20))
test_class <- c(rep(0, 500), rep(1, 500))
return(
list(
training = cbind(rbind(XY1, XY2), training_class),
test = cbind(rbind(XY1_test, XY2_test), test_class)
)
)
}
}
f_sample("a")
# model function factory
modelFuncFact <- function(method) {
function(data, class) {
caret::train(
x = data,
y = class,
method = method
)
}
}
modelFuncFact("glm")
logreg <- modelFuncFact("glm")
logreg()
logreg
f_sample <- function(scheme) {
# group means
m1 <- c(4, 2)       # a), b), c)
m2 <- c(1, 5)       #
m1_4 <- c(3, 5)     # d)
m2_4 <- c(1, 7)     #
# (co)variances
Var    <- c(4, 4)   # equal group variances
Var2   <- c(1, 1)   # different group variances
CorXY  <- 0         # different correlations
CorXY2 <- -0.5      #
CorXY3 <- 0.5       #
n_test <- 500       # group size test set
if(scheme == "a") {
n <- 20 # group size training set
# Class 1
Sigma <- matrix(c(Var[1], CorXY, CorXY, Var[2]), 2, 2)
XY1 <- mvrnorm(n = n, m1, Sigma)
XY1_test <- mvrnorm(n = n_test, m1, Sigma)
# Class 2
XY2 <- mvrnorm(n = n, m2, Sigma)
XY2_test <- mvrnorm(n = n_test, m2, Sigma)
training_class <- c(rep(0, 20), rep(1, 20))
test_class <- c(rep(0, 500), rep(1, 500))
return(
list(
training_data = cbind(rbind(XY1, XY2)),
training_class = training_class,
test_data = cbind(rbind(XY1_test, XY2_test)),
test = test_class
)
)
}
}
f_sample("a")
d <- f_sample("a")
enframe(map2)
enframe(d)
enframe(d)
t(enframe(d))
as_tibble(d)
Error.rates1
tibble(knn_1 = err.knn1[, 1],
knn_t = err.knn6[, 1],
lda = err.lda[, 1],
qda = err.qda[, 1],
logit = err.logit[, 1]))
tibble(knn_1 = err.knn1[, 1],
knn_t = err.knn6[, 1],
lda = err.lda[, 1],
qda = err.qda[, 1],
logit = err.logit[, 1])
tibble(scenario = "a"
knn_1 = err.knn1[, 1],
knn_6 = err.knn6[, 1],
lda = err.lda[, 1],
qda = err.qda[, 1],
logit = err.logit[, 1])
tibble(scenario = "a",
knn_1 = err.knn1[, 1],
knn_6 = err.knn6[, 1],
lda = err.lda[, 1],
qda = err.qda[, 1],
logit = err.logit[, 1])
error_rates_a <- tibble(
scenario = "a",
knn_1 = err.knn1[, 1],
knn_6 = err.knn6[, 1],
lda = err.lda[, 1],
qda = err.qda[, 1],
logit = err.logit[, 1]
)
error_rates_b <- tibble(
scenario = "b",
knn_1 = err.knn1[, 2],
knn_6 = err.knn6[, 2],
lda = err.lda[, 2],
qda = err.qda[, 2],
logit = err.logit[, 2]
)
error_rates_c <- tibble(
scenario = "c",
knn_1 = err.knn1[, 3],
knn_6 = err.knn6[, 3],
lda = err.lda[, 3],
qda = err.qda[, 3],
logit = err.logit[, 3]
)
error_rates_d <- tibble(
scenario = "d",
knn_1 = err.knn1[, 4],
knn_6 = err.knn6[, 4],
lda = err.lda[, 4],
qda = err.qda[, 4],
logit = err.logit[, 4]
)
# together
error_rates_test <- bind_rows(error_rates_a, error_rates_b)
error_rates_test
error_rates_test <- bind_rows(error_rates_a, error_rates_b, error_rates_c, error_rates_d)
error_rates_test
head(error_rates_test)
# together
error_rates_test <- bind_rows(error_rates_a, error_rates_b, error_rates_c, error_rates_d) %>%
pivot_longer(cols = knn_1:logit, names_to = "method", values_to = "error_rate")
head(error_rates_test)
ggplot(error_rates_test, aes(x = method, y = error_rate)) + geo
ggplot(error_rates_test, aes(x = method, y = error_rate)) +
geom_boxplot() +
facet_grid(~ scenario)
ggplot(error_rates_test, aes(x = method, y = error_rate)) +
geom_boxplot() +
facet_grid(~ scenario, cols = 2)
ggplot(error_rates_test, aes(x = method, y = error_rate)) +
geom_boxplot() +
facet_wrap(~ scenario, cols = 2)
ggplot(error_rates_test, aes(x = method, y = error_rate)) +
geom_boxplot() +
facet_grid(~ scenario, cols = 2)
ggplot(error_rates_test, aes(x = method, y = error_rate)) +
geom_boxplot() +
facet_grid(~ scenario, cols = 2, rows = 2)
ggplot(error_rates_test, aes(x = method, y = error_rate)) +
geom_boxplot() +
facet_wrap(~ scenario)
?facet_wrap
ggplot(error_rates_test, aes(x = method, y = error_rate)) +
geom_boxplot() +
facet_wrap(~ scenario) +
ggplot(error_rates_test, aes(x = method, y = error_rate)) +
geom_boxplot() +
facet_wrap(~ scenario) +
scale_fill_manual(c("cadetblue3", "cadetblue3", "seagreen4", "seagreen4", "mediumorchid"))
ggplot(error_rates_test, aes(x = method, y = error_rate)) +
geom_boxplot() +
facet_wrap(~ scenario) +
scale_color_manual(c("cadetblue3", "cadetblue3", "seagreen4", "seagreen4", "mediumorchid"))
ggplot(error_rates_test, aes(x = method, y = error_rate, fill = method)) +
geom_boxplot() +
facet_wrap(~ scenario) +
scale_fill_manual(c("cadetblue3", "cadetblue3", "seagreen4", "seagreen4", "mediumorchid"))
?scale_fill_manual
ggplot(error_rates_test, aes(x = method, y = error_rate, fill = method)) +
geom_boxplot() +
facet_wrap(~ scenario) +
scale_fill_manual(values = c("cadetblue3", "cadetblue3", "seagreen4", "seagreen4", "mediumorchid"))
ggplot(error_rates_test, aes(x = method, y = error_rate, fill = method)) +
geom_boxplot() +
facet_wrap(~ scenario) +
scale_fill_manual(values = c("cadetblue3", "cadetblue3", "seagreen4", "seagreen4", "mediumorchid"), guide = F)
ggplot(error_rates_test, aes(x = method, y = error_rate, fill = method)) +
geom_boxplot() +
facet_wrap(~ scenario) +
scale_fill_manual(values = c("cadetblue3", "cadetblue3", "seagreen4", "seagreen4", "mediumorchid"), guide = F) +
theme_bw()
ggplot(error_rates_test, aes(x = method, y = error_rate, fill = method)) +
geom_boxplot() +
facet_wrap(~ scenario) +
scale_fill_manual(values = c("cadetblue3", "cadetblue3", "seagreen4", "seagreen4", "mediumorchid"), guide = F) +
theme_classic()
install.packages("stargazer")
install.packages("ggExtra")
library(ggplot2)
data("diamonds")
plot(x = diamonds$carat, y = diamonds$price, pch = 20)
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price))
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price)) +
geom_smooth(method = 'loess')
ggplot(data = diamonds, mapping = aes(x = carat, y = price)) +
geom_point()
ggplot(data = diamonds, mapping = aes(x = carat, y = price)) +
geom_point() +
geom_smooth(method = "loess")
diamonds <- diamonds[sample(1:1e3), ]
ggplot(data = diamonds, mapping = aes(x = carat, y = price)) +
geom_point() +
geom_smooth(method = "loess")
diamonds <- diamonds[sample(1:1e3, 1e3), ]
diamonds <- diamonds[sample(1:1e3, 1e3), ]
data("diamonds")
knitr::opts_chunk$set(warning=FALSE, message=FALSE)
options(htmltools.dir.version = FALSE)
library(purrr)
diamonds <- diamonds[sample(1:1e3, 1e3), ]
ggplot(data = diamonds, mapping = aes(x = carat, y = price)) +
geom_point() +
geom_smooth(method = "loess")
sample(1:1e3, 1e3)
data("diamonds")
diamonds <- diamonds[sample(1:1e4, 1e4), ]
ggplot(data = diamonds, mapping = aes(x = carat, y = price)) +
geom_point() +
geom_smooth(method = "loess")
set.seed(123)
diamonds <- diamonds[sample(1:nrow(diamonds), 5000), ]
ggplot(data = diamonds, mapping = aes(x = carat, y = price)) +
geom_point() +
geom_smooth(method = "loess", se = F)
data("diamonds")
set.seed(123)
diamonds <- diamonds[sample(1:nrow(diamonds), 5000), ]
ggplot(data = diamonds, mapping = aes(x = carat, y = price)) +
geom_point() +
geom_smooth(method = "loess", se = F)
ggplot(diamonds,
aes(
x = carat,
y = price,
color = color,
shape =  cut)
) +
geom_point()
ggplot(diamonds,
aes(
x = carat,
y = price,
color = color,
shape =  cut)
) +
geom_point() +
geom_smooth(method = "loess", se = F)
ggplot(diamonds,
aes(
x = carat,
y = price,
color = color,
shape =  cut)
) +
geom_point() +
geom_smooth(
aes(color = color)
method = "loess", se = F
)
ggplot(diamonds,
aes(
x = carat,
y = price,
color = color,
shape =  cut)
) +
geom_point() +
geom_smooth(
aes(color = color),
method = "loess", se = F
)
ggplot(diamonds,
aes(
x = carat,
y = price,
color = color,
shape =  cut)
) +
geom_point() +
geom_smooth(
aes(x = carat, y = price, color = color),
method = "loess", se = F
)
ggplot(diamonds) +
geom_point(aes(x = carat, y = price, color = color, shape =  cut)) +
geom_smooth(
aes(x = carat, y = price, color = color),
method = "loess", se = F
)
ggplot(diamonds) +
geom_point(aes(x = carat, y = price, color = color, shape =  cut)) +
geom_smooth(
aes(x = carat, y = price, color = color),
method = "loess", se = F
) +
facet_wrap(~ color)
ggplot(diamonds) +
geom_point(aes(x = carat, y = price, color = color, shape =  cut)) +
geom_smooth(
aes(x = carat, y = price, group = color),
method = "loess", se = F
) +
facet_wrap(~ color)
library(dplyr)
mtcars %>% select_if(is.numeric) %>% map_dbl()
mtcars %>% select_if(is.numeric) %>% map_dbl(sd)
?group_by
?enframe
gapminder
??gapminder
ggplot2::msleep
data(msleep)
msleep
msleep %>% select(sleep_total)
msleep %>% select(sleep_total) %>% filter(sleep > 10)
msleep %>% select(sleep_total) %>% filter(sleep_total >= 10)
msleep %>% select(sleep_total) %>% filter(sleep_total >= 8)
msleep
msleep %>% vore %>% unique()
msleep %>% distinct(vore)
msleep
msleep %>% select(name, vore, sleep_total, sleep_rem, brainwt)
msleep %>%
select(name, vore, sleep_total, sleep_rem, brainwt) %>%
mutate(rem_share = sleep_rem / sleep_total)
msleep %>%
select(name, vore, sleep_total, sleep_rem, brainwt) %>%
mutate(rem_share = sleep_rem / sleep_total) %>%
tidyr::drop_na()
msleep %>%
select(name, vore, sleep_total, sleep_rem, brainwt) %>%
mutate(rem_share = sleep_rem / sleep_total) %>%
na.omit()
diamonds
diamonds$cut %>% distinct
diamonds$cut %>% distinct()
diamonds %>% distinct(cut)
diamonds
?diamonds
diamonds %>% filter(price <= 2000)
diamonds %>% filter(price <= 2000, cut == "Very Good")
diamonds %>% distinct(cclarity)
diamonds %>% distinct(clarity)
diamonds %>% filter(price <= 2000, clarity == IF)
diamonds %>% filter(price <= 2000, clarity == "IF")
diamonds %>% filter(price <= 2000, clarity == "VS1")
diamonds %>% filter(clarity == "VS1")
diamonds %>%
filter(price <= 2000, clarity == "VS1") %>%
group_by(cut) %>%
summarize(mean = mean(carat))
diamonds %>%
filter(price <= 2000, clarity == "VS1") %>%
select(carat) %>%
mean()
diamonds %>%
filter(price <= 2000, clarity == "VS1") %>%
select(carat)
diamonds %>%
filter(price <= 2000, clarity == "VS1") %>%
select(carat) %>% mean()
diamonds %>%
filter(price <= 2000, clarity == "VS1") %>%
select(carat) %>%
summarize(mean(carat))
select(diamonds, clarity, carat, cut)
diamonds
library(tidyverse)
diamonds %>% select(carat, clarity, price) %>% pivot_wider(cols = clarity, names_from = clarity)
diamonds %>% select(carat, clarity, price) %>% pivot_wider(clarity, names_from = clarity)
diamonds %>% select(carat, clarity, price) %>% pivot_wider(clarity)
diamonds %>% select(carat, clarity, price)
diamonds %>% select(carat, clarity, price) %>% pivot_wider(carat, names_from = clarity)
diamonds %>% select(carat, clarity, price) %>% pivot_wider(everything(), names_from = clarity)
diamonds %>% select(carat, clarity, price) %>% pivot_wider(everything(), names_from = clarity, values_from = carat)
diamonds %>% select(carat, clarity, price) %>% pivot_wider(carat, names_from = clarity, values_from = carat)
diamonds %>% select(carat, clarity) %>% pivot_wider(carat, names_from = clarity, values_from = carat)
diamonds %>% select(carat, clarity) %>% pivot_wider(carat, names_from = clarity)
tibble(
country = c("Afghanistan", "Germany", "USA")
`1999` = c(155,6,20)
`2000` = c(150,5,10)
)
tibble(
country = c("Afghanistan", "Germany", "USA"),
`1999` = c(155,6,20),
`2000` = c(150,5,10)
)
dat %>% pivot_longer(cols = `1999`:`2000`, names_to = "year", values_to = "cases")
dat <- tibble(
country = c("Afghanistan", "Germany", "USA"),
`1999` = c(155, 6, 20),
`2000` = c(150, 5, 10)
)
dat %>% pivot_longer(cols = `1999`:`2000`, names_to = "year", values_to = "cases")
dat <- tibble(
country = c("Afghanistan", "Germany", "USA"),
`1999` = c(155, 6, 20),
`2000` = c(150, 5, 10)
)
unlink('sciebo/Statistical Learning/Excercises/SS20/slides tidyverse/slides_map_cache', recursive = TRUE)
diamonds
??ggpairs
# ggplot2 EOC exercises
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point()
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
geom_smooth(method = "loess")
# 2.
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
geom_smooth(method = "loess", aes(color = cyl))
# 2.
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
geom_smooth(method = "loess", mapping = aes(color = cyl))
# 2.
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
geom_smooth(method = "loess", mapping = aes(x = mpg, y = hp, color = cyl))
# 2.
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
geom_smooth(method = "loess", mapping = aes(x = mpg, y = hp, group = cyl))
# 2.
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
geom_smooth(method = "loess",
mapping = aes(x = mpg, y = hp, group = cyl, col = cyl))
# 2.
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
geom_smooth(method = "loess",
mapping = aes(x = mpg, y = hp, group = cyl, col = factor(cyl)))
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
geom_smooth(method = "loess", group=cyl)
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
geom_smooth(method = "loess",
mapping = aes(x = mpg, y = hp,
group = cyl, col = factor(cyl)))
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
geom_smooth(method = "loess",
mapping = aes(x = mpg, y = hp, group = cyl, col = factor(cyl)),
se = F
)
# 4.
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
geom_smooth(method = "lm", se = F, color = "red") +
geom_smooth(method = "lm", se = F, formula = y ~ x^2, color = "blue")
# 4.
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
#geom_smooth(method = "lm", se = F, color = "red") +
geom_smooth(method = "lm", se = F, formula = y ~ x^2, color = "blue")
# 4.
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
#geom_smooth(method = "lm", se = F, color = "red") +
geom_smooth(method = "lm", se = F, formula = y ~ I(x^2), color = "blue")
# 4.
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
geom_smooth(method = "lm", se = F, color = "red") +
geom_smooth(method = "lm", se = F, formula = y ~ I(x^2), color = "blue")
setwd("~/Git projects/brief_intro_tidy")
