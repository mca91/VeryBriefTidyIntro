# rhdf5::h5ls("~/ex_image2.h5")
image <- rhdf5::h5read("~/ex_image2.h5", "image24bitpixel")
image <- magick::image_read(image)
#image <- magick::image_scale(image, "100%")
image
library(ggplot2)
library(dplyr)
library(tidyr)
library(latex2exp)
xi.grid <- seq.int(from=-5, to=5, by = 0.1)
set.seed(123)
rej.50  <- xi.grid^2 + rnorm(n=length(xi.grid), mean=-8, sd=1.5)
rej.100 <- xi.grid^2 + rnorm(n=length(xi.grid), mean=-4, sd=1.5)
rej.500 <- xi.grid^2 + rnorm(n=length(xi.grid), mean=-0.00, sd=1.5)
rej.50.true  <- xi.grid^2 + rnorm(n=length(xi.grid), mean=-8, sd=0.5)
rej.100.true <- xi.grid^2 + rnorm(n=length(xi.grid), mean=-4, sd=0.5)
rej.500.true <- xi.grid^2 + rnorm(n=length(xi.grid), mean=-0.00, sd=0.5)
test_data <- data.frame(
n50  = rej.50,
n100 = rej.100,
n500 = rej.500,
n50.true = rej.50.true,
n100.true = rej.100.true,
n500.true = rej.500.true,
date = xi.grid
)%>%
# change format of the data.frame to fit ggplot requirements
tidyr::pivot_longer(cols = c('n50', 'n100', 'n500', 'n50.true', 'n100.true', 'n500.true'),
names_to = "variable")%>%
dplyr::mutate(variable = factor(variable,
levels = c('n500', 'n100', 'n50', 'n500.true', 'n100.true', 'n50.true')))%>%
dplyr::mutate(indicator = as.factor(case_when(
variable %in% c('n500.true', 'n100.true', 'n50.true') ~ 1,
TRUE ~ 0
)))
# labels for the color legend with italic
labels_colour <- c(bquote(paste(italic("n "), " = 500")),
bquote(paste(italic("n "), " = 100")),
bquote(paste(italic("n "), " = 50")))
B <- ggplot(test_data, aes(x = date, y = value, color = variable)) +
# mapping changed: everything two global options, y = value of all variables
# and color grouping by variable
geom_line(aes(linetype = indicator),  size = 1) +
labs(x = TeX("$\\xi$"),
y = "Rejection Frequency") +
guides(linetype = FALSE)+
scale_colour_manual(name = "Legend",
values = c("blue", "red", "green", "blue", "red", "green"), # setting colours
labels = labels_colour)+
#   scale_colour_manual(values = c("blue", "red", "green")) # setting colours +
theme_bw()+
# command for a line without legend
geom_hline(yintercept = 0.05, linetype = 'dashed', size = I(0.5), color = 'black')+
# assigning labels
guides(color = guide_legend(override.aes = list(color = c('blue', 'red', 'green'),
labels = labels_colour)) )
B
test_data
head(test_data)
test_data %>% mutate(grp = ifelse(variable %in% c("n50", "n100", "n500"), "1", "2"))
test_data <- test_data %>% mutate(grp = ifelse(variable %in% c("n50", "n100", "n500"), "1", "2"))
B <- ggplot(test_data, aes(x = date, y = value, color = variable, group = "1")) +
# mapping changed: everything two global options, y = value of all variables
# and color grouping by variable
geom_line(aes(linetype = indicator),  size = 1) +
labs(x = TeX("$\\xi$"),
y = "Rejection Frequency") +
guides(linetype = FALSE)+
scale_colour_manual(name = "Legend",
values = c("blue", "red", "green", "blue", "red", "green"), # setting colours
labels = labels_colour)+
#   scale_colour_manual(values = c("blue", "red", "green")) # setting colours +
theme_bw()+
# command for a line without legend
geom_hline(yintercept = 0.05, linetype = 'dashed', size = I(0.5), color = 'black')+
# assigning labels
guides(color = guide_legend(override.aes = list(color = c('blue', 'red', 'green'),
labels = labels_colour)) )
B
test_data <- test_data %>% mutate(grp = ifelse(variable %in% c("n50", "n100", "n500"), "1", "2"))
B <- ggplot(test_data, aes(x = date, y = value, color = variable)) +
# mapping changed: everything two global options, y = value of all variables
# and color grouping by variable
geom_line(aes(linetype = indicator),  size = 1) +
labs(x = TeX("$\\xi$"),
y = "Rejection Frequency") +
guides(linetype = FALSE)+
scale_colour_manual(name = "Legend",
values = c("blue", "red", "green", "blue", "red", "green"), # setting colours
labels = labels_colour)+
#   scale_colour_manual(values = c("blue", "red", "green")) # setting colours +
theme_bw()+
# command for a line without legend
geom_hline(yintercept = 0.05, linetype = 'dashed', size = I(0.5), color = 'black')+
# assigning labels
guides(color = guide_legend(override.aes = list(color = c('blue', 'red', 'green'),
labels = labels_colour)) )
B
test_data <- test_data %>% mutate(grp = ifelse(variable %in% c("n50", "n100", "n500"), "1", "2"))
B <- ggplot(subset(test_data, group == 2), aes(x = date, y = value, color = variable)) +
# mapping changed: everything two global options, y = value of all variables
# and color grouping by variable
geom_line(aes(linetype = indicator),  size = 1) +
labs(x = TeX("$\\xi$"),
y = "Rejection Frequency") +
guides(linetype = FALSE)+
scale_colour_manual(name = "Legend",
values = c("blue", "red", "green", "blue", "red", "green"), # setting colours
labels = labels_colour)+
#   scale_colour_manual(values = c("blue", "red", "green")) # setting colours +
theme_bw()+
# command for a line without legend
geom_hline(yintercept = 0.05, linetype = 'dashed', size = I(0.5), color = 'black')+
# assigning labels
guides(color = guide_legend(override.aes = list(color = c('blue', 'red', 'green'),
labels = labels_colour)) )
test_data <- test_data %>% mutate(grp = ifelse(variable %in% c("n50", "n100", "n500"), "1", "2"))
B <- ggplot(subset(test_data, grp == 2), aes(x = date, y = value, color = variable)) +
# mapping changed: everything two global options, y = value of all variables
# and color grouping by variable
geom_line(aes(linetype = indicator),  size = 1) +
labs(x = TeX("$\\xi$"),
y = "Rejection Frequency") +
guides(linetype = FALSE)+
scale_colour_manual(name = "Legend",
values = c("blue", "red", "green", "blue", "red", "green"), # setting colours
labels = labels_colour)+
#   scale_colour_manual(values = c("blue", "red", "green")) # setting colours +
theme_bw()+
# command for a line without legend
geom_hline(yintercept = 0.05, linetype = 'dashed', size = I(0.5), color = 'black')+
# assigning labels
guides(color = guide_legend(override.aes = list(color = c('blue', 'red', 'green'),
labels = labels_colour)) )
B
test_data <- test_data %>% mutate(grp = ifelse(variable %in% c("n50", "n100", "n500"), "1", "2"))
B <- ggplot(subset(test_data, grp == 2), aes(x = date, y = value, color = variable)) +
geom_line(aes(linetype = indicator),  size = 1) +
labs(x = TeX("$\\xi$"),
y = "Rejection Frequency") +
guides(linetype = FALSE)+
scale_colour_manual(name = "Legend",
values = c("blue", "red", "green"), # setting colours
labels = labels_colour) +
theme_bw() +
geom_hline(yintercept = 0.05, linetype = 'dashed', size = I(0.5), color = 'black')+
guides(color = guide_legend(override.aes = list(color = c('blue', 'red', 'green'),
labels = labels_colour)) )
B
labels_colour
B <- ggplot(subset(test_data, grp == 2), aes(x = date, y = value, color = variable)) +
geom_line(aes(linetype = indicator),  size = 1) +
labs(x = TeX("$\\xi$"), y = "Rejection Frequency") +
guides(linetype = FALSE)+
scale_colour_manual(name = "Legend",
values = c("blue", "red", "green"),
labels = labels_colour) +
geom_line(subset(test_data, grp ==1), show.legend = F) +
theme_bw() +
geom_hline(yintercept = 0.05, linetype = 'dashed', size = I(0.5), color = 'black')+
guides(color = guide_legend(override.aes = list(color = c('blue', 'red', 'green'),
labels = labels_colour)) )
B <- ggplot(subset(test_data, grp == 2), aes(x = date, y = value, color = variable)) +
geom_line(aes(linetype = indicator),  size = 1) +
labs(x = TeX("$\\xi$"), y = "Rejection Frequency") +
guides(linetype = FALSE)+
scale_colour_manual(name = "Legend",
values = c("blue", "red", "green"),
labels = labels_colour) +
geom_line(data = subset(test_data, grp == 1), show.legend = F) +
theme_bw() +
geom_hline(yintercept = 0.05, linetype = 'dashed', size = I(0.5), color = 'black')+
guides(color = guide_legend(override.aes = list(color = c('blue', 'red', 'green'),
labels = labels_colour)) )
B
B <- ggplot(subset(test_data, grp == 2), aes(x = date, y = value, color = variable)) +
geom_line(aes(linetype = indicator),  size = 1) +
labs(x = TeX("$\\xi$"), y = "Rejection Frequency") +
guides(linetype = FALSE)+
scale_colour_manual(name = "Legend",
values = c("blue", "red", "green", "blue", "red", "green"),
labels = labels_colour) +
geom_line(data = subset(test_data, grp == 1), show.legend = F) +
theme_bw() +
geom_hline(yintercept = 0.05, linetype = 'dashed', size = I(0.5), color = 'black')+
guides(color = guide_legend(override.aes = list(color = c('blue', 'red', 'green'),
labels = labels_colour)) )
B
B <- ggplot(subset(test_data, grp == 2), aes(x = date, y = value, color = variable)) +
geom_line(aes(linetype = indicator),  size = 1) +
labs(x = TeX("$\\xi$"), y = "Rejection Frequency") +
guides(linetype = FALSE)+
scale_colour_manual(name = "Legend",
values = c("blue", "red", "green", "blue", "red", "green"),
labels = labels_colour) +
geom_line(data = subset(test_data, grp == 1), aes(x = date, y = value, color = variable)) +
theme_bw() +
geom_hline(yintercept = 0.05, linetype = 'dashed', size = I(0.5), color = 'black')+
guides(color = guide_legend(override.aes = list(color = c('blue', 'red', 'green'),
labels = labels_colour)) )
B
labels_colour
B <- ggplot(subset(test_data, grp == 2), aes(x = date, y = value, color = variable)) +
geom_line(aes(linetype = indicator),  size = 1) +
labs(x = TeX("$\\xi$"), y = "Rejection Frequency") +
guides(linetype = FALSE)+
scale_colour_manual(name = "Legend",
values = c("blue", "red", "green", "blue", "red", "green"),
labels = labels_colour) +
geom_line(data = subset(test_data, grp == 1), aes(x = date, y = value, color = variable)) +
theme_bw() +
geom_hline(yintercept = 0.05, linetype = 'dashed', size = I(0.5), color = 'black')
B
B <- ggplot(subset(test_data, grp == 2), aes(x = date, y = value, color = variable)) +
geom_line(aes(linetype = indicator),  size = 1) +
labs(x = TeX("$\\xi$"), y = "Rejection Frequency") +
guides(linetype = FALSE)+
scale_colour_manual(name = "Legend",
values = c("blue", "red", "green", "blue", "red", "green"),
labels = labels_colour) +
geom_line(data = subset(test_data, grp == 1), aes(x = date, y = value, color = variable), inherit.aes = F) +
theme_bw() +
geom_hline(yintercept = 0.05, linetype = 'dashed', size = I(0.5), color = 'black')
B
labels_colour
B <- ggplot(subset(test_data, grp == 2), aes(x = date, y = value, color = variable)) +
geom_line(aes(linetype = indicator),  size = 1) +
labs(x = TeX("$\\xi$"), y = "Rejection Frequency") +
guides(linetype = FALSE)+
scale_colour_manual(name = "Legend",
breaks = c("n=500", "n=100", "n=50"),
values = c("blue", "red", "green"),
labels = labels_colour) +
geom_line(data = subset(test_data, grp == 1), aes(x = date, y = value, color = variable), inherit.aes = F) +
theme_bw() +
geom_hline(yintercept = 0.05, linetype = 'dashed', size = I(0.5), color = 'black')
B
B <- ggplot(subset(test_data, grp == 2), aes(x = date, y = value, color = variable)) +
geom_line(aes(linetype = indicator),  size = 1) +
labs(x = TeX("$\\xi$"), y = "Rejection Frequency") +
guides(linetype = FALSE)+
scale_colour_manual(name = "Legend",
breaks = c("n=500", "n=100", "n=50"),
values = c("blue", "red", "green", "blue", "red", "green"),
labels = labels_colour) +
geom_line(data = subset(test_data, grp == 1), aes(x = date, y = value, color = variable), inherit.aes = F) +
theme_bw() +
geom_hline(yintercept = 0.05, linetype = 'dashed', size = I(0.5), color = 'black')
B
B <- ggplot(subset(test_data, grp == 2), aes(x = date, y = value, color = variable)) +
geom_line(aes(linetype = indicator),  size = 1) +
labs(x = TeX("$\\xi$"), y = "Rejection Frequency") +
guides(linetype = FALSE)+
scale_colour_manual(name = "Legend",
breaks = c("n=500", "n=100", "n=50"),
values = c("blue", "red", "green", "blue", "red", "green"),
labels = labels_colour) +
geom_line(data = subset(test_data, grp == 1), aes(x = date, y = value, color = variable)) +
theme_bw() +
geom_hline(yintercept = 0.05, linetype = 'dashed', size = I(0.5), color = 'black')
B <- ggplot(test_data, aes(x = date, y = value, color = variable)) +
geom_line(aes(linetype = indicator),  size = 1) +
labs(x = TeX("$\\xi$"), y = "Rejection Frequency") +
guides(linetype = FALSE)+
scale_colour_manual(name = "Legend",
breaks = c("n=500", "n=100", "n=50"),
values = c("blue", "red", "green", "blue", "red", "green"),
labels = labels_colour)
B
test_data <- data.frame(
n50  = rej.50,
n100 = rej.100,
n500 = rej.500,
n50.true = rej.50.true,
n100.true = rej.100.true,
n500.true = rej.500.true,
date = xi.grid
)%>%
# change format of the data.frame to fit ggplot requirements
tidyr::pivot_longer(cols = c('n50', 'n100', 'n500', 'n50.true', 'n100.true', 'n500.true'),
names_to = "variable")%>%
dplyr::mutate(variable = factor(variable,
levels = c('n500', 'n100', 'n50', 'n500.true', 'n100.true', 'n50.true')))%>%
dplyr::mutate(indicator = as.factor(case_when(
variable %in% c('n500.true', 'n100.true', 'n50.true') ~ 1,
TRUE ~ 0
)))
# labels for the color legend with italic
labels_colour <- c(bquote(paste(italic("n "), " = 500")),
bquote(paste(italic("n "), " = 100")),
bquote(paste(italic("n "), " = 50")))
B <- ggplot(test_data, aes(x = date, y = value, color = variable)) +
geom_line(aes(linetype = indicator),  size = 1) +
geom_hline(yintercept = 0.05, linetype = 'dashed', size = I(0.5), color = 'black') #
B
B <- ggplot(test_data, aes(x = date, y = value, color = variable)) +
geom_line(aes(linetype = indicator),  size = 1) +
geom_hline(yintercept = 0.05, linetype = 'dashed', size = I(0.5), color = 'black') #
labs(x = TeX("$\\xi$"), y = "Rejection Frequency") +
scale_colour_manual(name = "Legend",
breaks = c("n=500", "n=100", "n=50"),
values = c("blue", "red", "green", "blue", "red", "green"))
B
ttest_data
test_data$variable
B <- ggplot(test_data, aes(x = date, y = value, color = variable)) +
geom_line(aes(linetype = indicator),  size = 1) +
geom_hline(yintercept = 0.05, linetype = 'dashed', size = I(0.5), color = 'black') #
labs(x = TeX("$\\xi$"), y = "Rejection Frequency") +
scale_colour_manual(name = "Legend",
breaks = c("n500", "n100", "n50"),
values = c("blue", "red", "green", "blue", "red", "green"))
B
test_data$variable
ggplot(test_data, aes(x = date, y = value, color = variable)) +
geom_line(aes(linetype = indicator),  size = 1) +
geom_hline(yintercept = 0.05, linetype = 'dashed', size = I(0.5), color = 'black') #
ggplot(test_data, aes(x = date, y = value, color = variable)) +
geom_line(aes(linetype = indicator),  size = 1) +
geom_hline(yintercept = 0.05, linetype = 'dashed', size = I(0.5), color = 'black')
ggplot(test_data, aes(x = date, y = value, color = variable)) +
geom_line(aes(linetype = indicator),  size = 1) +
geom_hline(yintercept = 0.05, linetype = 'dashed', size = I(0.5), color = 'black')
labs(x = TeX("$\\xi$"), y = "Rejection Frequency") +
scale_colour_manual(name = "Legend",
breaks = c("n500", "n100", "n50"),
values = c("blue", "red", "green", "blue", "red", "green"))
ggplot(test_data, aes(x = date, y = value, color = variable)) +
geom_line(aes(linetype = indicator),  size = 1) +
geom_hline(yintercept = 0.05, linetype = 'dashed', size = I(0.5), color = 'black')
ggplot(test_data, aes(x = date, y = value, color = variable)) +
geom_line(aes(linetype = indicator),  size = 1) +
geom_hline(yintercept = 0.05, linetype = 'dashed', size = I(0.5), color = 'black') +
labs(x = TeX("$\\xi$"), y = "Rejection Frequency") +
scale_color_brewer(breaks=c("n500", "n100", "n50"), type="qual", palette=7)
ggplot(test_data, aes(x = date, y = value, color = variable)) +
geom_line(aes(linetype = indicator),  size = 1) +
geom_hline(yintercept = 0.05, linetype = 'dashed', size = I(0.5), color = 'black') +
labs(x = TeX("$\\xi$"), y = "Rejection Frequency") +
scale_color_brewer(breaks=c("n500", "n100", "n50"), type="qual", palette=7)
guides(linetype = F)
ggplot(test_data, aes(x = date, y = value, color = variable)) +
geom_line(aes(linetype = indicator),  size = 1) +
geom_hline(yintercept = 0.05, linetype = 'dashed', size = I(0.5), color = 'black') +
labs(x = TeX("$\\xi$"), y = "Rejection Frequency") +
scale_color_brewer(breaks=c("n500", "n100", "n50"), type="qual", palette = "virdis")
ggplot(test_data, aes(x = date, y = value, color = variable)) +
geom_line(aes(linetype = indicator),  size = 1) +
geom_hline(yintercept = 0.05, linetype = 'dashed', size = I(0.5), color = 'black') +
labs(x = TeX("$\\xi$"), y = "Rejection Frequency") +
scale_color_brewer(breaks=c("n500", "n100", "n50"), type = "qual", palette = 1)
ggplot(test_data, aes(x = date, y = value, color = variable)) +
geom_line(aes(linetype = indicator),  size = 1) +
geom_hline(yintercept = 0.05, linetype = 'dashed', size = I(0.5), color = 'black') +
labs(x = TeX("$\\xi$"), y = "Rejection Frequency") +
scale_color_manual(breaks = c("n500", "n100", "n50"), values = c("blue", "green", "red")) +
guides(linetype = F)
ggplot(test_data, aes(x = date, y = value, color = variable)) +
geom_line(aes(linetype = indicator),  size = 1) +
geom_hline(yintercept = 0.05, linetype = 'dashed', size = I(0.5), color = 'black') +
labs(x = TeX("$\\xi$"), y = "Rejection Frequency") +
scale_color_manual(breaks = c("n500", "n100", "n50"), values = c("blue", "green", "red", "blue", "green", "red")) +
guides(linetype = F)
ggplot(test_data, aes(x = date, y = value, color = variable)) +
geom_line(aes(linetype = indicator),  size = 1) +
geom_hline(yintercept = 0.05, linetype = 'dashed', size = I(0.5), color = 'black') +
labs(x = TeX("$\\xi$"), y = "Rejection Frequency") +
scale_color_manual(breaks = c("n500", "n100", "n50"), values = c("blue", "green", "red", "blue", "green", "red")) +
guides(linetype = F,
color = guide_legend(override.aes = list(color = c('blue', 'red', 'green'),
labels = labels_colour)))
ggplot(test_data, aes(x = date, y = value, color = variable)) +
geom_line(aes(linetype = indicator),  size = 1) +
geom_hline(yintercept = 0.05, linetype = 'dashed', size = I(0.5), color = 'black') +
labs(x = TeX("$\\xi$"), y = "Rejection Frequency") +
scale_color_manual("Legend",
breaks = c("n500", "n100", "n50"),
values = c("blue", "green", "red", "blue", "green", "red")) +
guides(linetype = F,
color = guide_legend(override.aes = list(color = c('blue', 'red', 'green'),
labels = labels_colour)))
?scale_color_manual()
ggplot(test_data, aes(x = date, y = value, color = variable)) +
geom_line(aes(linetype = indicator),  size = 1) +
geom_hline(yintercept = 0.05, linetype = 'dashed', size = I(0.5), color = 'black') +
labs(x = TeX("$\\xi$"), y = "Rejection Frequency") +
scale_color_manual("Legend",
breaks = c("n500", "n100", "n50"),
values = c("blue", "green", "red", "blue", "green", "red"),
labels = labels_colour) +
guides(linetype = F,
color = guide_legend(override.aes = list(color = c('blue', 'red', 'green'),
labels = labels_colour)))
ggplot(test_data, aes(x = date, y = value, color = variable)) +
geom_line(aes(linetype = indicator),  size = 1) +
geom_hline(yintercept = 0.05, linetype = 'dashed', size = I(0.5), color = 'black') +
labs(x = TeX("$\\xi$"), y = "Rejection Frequency") +
scale_color_manual("Legend",
breaks = c("n500", "n100", "n50"),
values = c("blue", "green", "red", "blue", "green", "red"),
labels = labels_colour) +
guides(linetype = F) +
theme_bw()
library(ggplot2)
library(dplyr)
library(tidyr)
library(latex2exp)
xi.grid <- seq.int(from=-5, to=5, by = 0.1)
set.seed(123)
rej.50  <- xi.grid^2 + rnorm(n=length(xi.grid), mean=-8, sd=1.5)
rej.100 <- xi.grid^2 + rnorm(n=length(xi.grid), mean=-4, sd=1.5)
rej.500 <- xi.grid^2 + rnorm(n=length(xi.grid), mean=-0.00, sd=1.5)
rej.50.true  <- xi.grid^2 + rnorm(n=length(xi.grid), mean=-8, sd=0.5)
rej.100.true <- xi.grid^2 + rnorm(n=length(xi.grid), mean=-4, sd=0.5)
rej.500.true <- xi.grid^2 + rnorm(n=length(xi.grid), mean=-0.00, sd=0.5)
test_data <- data.frame(
n50  = rej.50,
n100 = rej.100,
n500 = rej.500,
date = xi.grid
)%>%
# change format of the data.frame to fit ggplot requirements
tidyr::pivot_longer(cols = c('n50', 'n100', 'n500'),
names_to = "variable")%>%
dplyr::mutate(variable = factor(variable,
levels = c('n500', 'n100', 'n50')))
test_data_1 <- data.frame(
n50.true = rej.50.true,
n100.true = rej.100.true,
n500.true = rej.500.true,
date = xi.grid
)%>%
# change format of the data.frame to fit ggplot requirements
tidyr::pivot_longer(cols = c('n50.true', 'n100.true', 'n500.true'),
names_to = "variable_true", values_to = 'values_true' )%>%
dplyr::mutate(variable_true = factor(variable_true,
levels = c('n500.true', 'n100.true', 'n50.true')))
test_data <- bind_cols(test_data, test_data_1%>%dplyr::select(-date))
#%>%
#   dplyr::mutate(indicator = as.factor(case_when(
#      variable %in% c('n500.true', 'n100.true', 'n50.true') ~ 1,
#      TRUE ~ 0
#)))
# labels for the color legend with italic
labels_colour <- c(bquote(paste(italic("n "), " = 500")),
bquote(paste(italic("n "), " = 100")),
bquote(paste(italic("n "), " = 50")))
ggplot(test_data, aes(x = date, y = value, color = variable)) +
# mapping changed: everything two global options, y = value of all variables
# and color grouping by variable
geom_line(aes(color = variable),  size = 1) +
labs(x = TeX("$\\xi$"),
y = "Rejection Frequency") +
#   guides(color = FALSE)+
#   scale_colour_manual(name = "Legend",
#                     values = c("blue", "red", "green", "blue", "red", "green"), # setting colours
#                     labels = labels_colour)+
geom_line(aes(y = values_true, color = variable_true), linetype = 'dotted',  size = 1) +
#   scale_colour_manual(values = c("blue", "red", "green")) # setting colours +
theme_bw()+
# command for a line without legend
geom_hline(yintercept = 0.05, linetype = 'dashed', size = I(0.5), color = 'black')
# assigning labels
guides(color = guide_legend(override.aes = list(color = c('blue', 'red', 'green') ) ) )
library(kableExtra)
library(kableExtra)
library(kableExtra)
library(shiny)
?fluidRow()
?column
knitr::kable(
list(d1, d2),
caption = 'Two tables placed side by side.',
valign = 't'
)
d1 <- head(cars, 3)
d2 <- head(mtcars[, 1:3], 5)
knitr::kable(
list(d1, d2),
caption = 'Two tables placed side by side.',
valign = 't'
)
?column()
d2 <- head(mtcars[, 1:3], 5) %>% kable() %>% kable_styling()
d2 <- head(mtcars[, 1:3], 5) %>% kable() %>% kable_styling()
d2
tinytex:::is_tinytex()
install.packages(c('tinytex', 'rmarkdown'))
tinytex::install_tinytex()
install.packages(c("tinytex", "rmarkdown"))
options(tinytex.engine = 'xelatex')
uninstall.package
?uninstall
??uninstall
remove.packages("tinytex")
Sys.getenv('RSTUDIO_PDFLATEX')
Rcpp::sourceCpp('sciebo/P2/WBPURTs/src/functions_boot.cpp')
Rcpp::sourceCpp('sciebo/P2/WBPURTs/src/functions_boot.cpp')
Rcpp::sourceCpp('sciebo/P2/WBPURTs/src/functions_boot.cpp')
Rcpp::sourceCpp('sciebo/P2/WBPURTs/src/functions_boot.cpp')
Rcpp::sourceCpp('sciebo/P2/WBPURTs/src/functions_boot.cpp')
Rcpp::sourceCpp('sciebo/P2/WBPURTs/src/functions_boot.cpp')
install.packages("xaringan")
install.packages("xaringan")
xaringan:::inf_mr()
xaringan:::inf_mr()
setwd("~/Git projects/brief_intro_tidy")
warnings()
git status
xaringan:::inf_mr()
xaringan:::inf_mr()
pagedown::chrome_print("index.html")
